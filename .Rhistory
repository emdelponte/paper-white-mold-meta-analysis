plot (y~x)
abline (a=732.9, b=-66)
library(shiny)
library("miniUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ui <- miniPage(
gadgetTitleBar("My Gadget"),
miniContentPanel(
## Your UI items go here.
)
detach("package:miniUI", unload=TRUE)
library("miniUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(shiny)
ui <- miniPage(
gadgetTitleBar("My Gadget"),
miniContentPanel(
## Your UI items go here.
)
runGadget()
runGadget(ui)
library(shiny)
library(miniUI)
# We'll wrap our Shiny Gadget in an addin.
# Let's call it 'clockAddin()'.
clockAddin <- function() {
# Our ui will be a simple gadget page, which
# simply displays the time in a 'UI' output.
ui <- miniPage(
gadgetTitleBar("Clock"),
miniContentPanel(
uiOutput("time")
)
server <- function(input, output, session) {
# Set some CSS styles for our clock.
clockStyles <- paste(
"border: 1px solid #DADADA",
"background-color: #EFEFEF",
"border-radius: 5px",
"font-size: 6em",
"margin-top: 60px",
"text-align: center",
sep = "; "
)
# We'll use a 'reactiveTimer()' to force Shiny
# to update and show the clock every second.
invalidatePeriodically <- reactiveTimer(intervalMs = 1000)
observe({
# Call our reactive timer in an 'observe' function
# to ensure it's repeatedly fired.
invalidatePeriodically()
# Get the time, and render it as a large paragraph element.
time <- Sys.time()
output$time <- renderUI({
p(style = clockStyles, time)
})
# Listen for 'done' events. When we're finished, we'll
# insert the current time, and then stop the gadget.
observeEvent(input$done, {
timeText <- paste0("\"", as.character(Sys.time()), "\"")
rstudioapi::insertText(timeText)
stopApp()
})
}
# We'll use a pane viwer, and set the minimum height at
# 300px to ensure we get enough screen space to display the clock.
viewer <- paneViewer(300)
runGadget(ui, server, viewer = viewer)
}
# Try running the clock!
clockAddin()
viewer <- paneViewer(200)
runGadget(ui, server, viewer = viewer)
}
clockAddin()
library(shiny)
library(miniUI)
# We'll wrap our Shiny Gadget in an addin.
# Let's call it 'clockAddin()'.
clockAddin <- function() {
# Our ui will be a simple gadget page, which
# simply displays the time in a 'UI' output.
ui <- miniPage(
gadgetTitleBar("Clock"),
miniContentPanel(
uiOutput("time")
)
server <- function(input, output, session) {
# Set some CSS styles for our clock.
clockStyles <- paste(
"border: 1px solid #DADADA",
"background-color: #EFEFEF",
"border-radius: 5px",
"font-size: 6em",
"margin-top: 60px",
"text-align: center",
sep = "; "
)
# We'll use a 'reactiveTimer()' to force Shiny
# to update and show the clock every second.
invalidatePeriodically <- reactiveTimer(intervalMs = 1000)
observe({
# Call our reactive timer in an 'observe' function
# to ensure it's repeatedly fired.
invalidatePeriodically()
# Get the time, and render it as a large paragraph element.
time <- Sys.time()
output$time <- renderUI({
p(style = clockStyles, time)
})
# Listen for 'done' events. When we're finished, we'll
# insert the current time, and then stop the gadget.
observeEvent(input$done, {
timeText <- paste0("\"", as.character(Sys.time()), "\"")
rstudioapi::insertText(timeText)
stopApp()
})
}
# We'll use a pane viwer, and set the minimum height at
# 300px to ensure we get enough screen space to display the clock.
viewer <- paneViewer(200)
runGadget(ui, server, viewer = viewer)
}
# Try running the clock!
clockAddin()
install.packages("slidify")
library (agricolae)# carrega o pacote no ambiente
trt <- c("dose 0.5", "dose 1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(trt, r, serie = 2,  2543)
str(crd1) # verifica a estrutura do objeto
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
m1$trat <- interaction (m1$Mg, m1$rep) # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
?
?interaction
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_") # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep") # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
# especifica o separador que vai indicar o número da repetição
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep")
matrix (m1$trat, ncol = 4)  # função para gerar matriz
trt <- c("dose_0.5", "dose_1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(trt, r, serie = 2,  2543)
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
# especifica o separador que vai indicar o número da repetição
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep")
matrix (m1$trat, ncol = 4)  # função para gerar matriz
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)  colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)  colnames (m1) <- c("code", "Mg", "rep")
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r) colnames (m1) <- c("code", "Mg", "rep")
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
dose <- c("dose_0.5", "dose_1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(dose, r, serie = 2,  2543)
m1 <- data.frame(crd1$book$plots, crd1$book$dose, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
addinexamples:::reformatAddin()
trt <- c(2,3)
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
trt <- c(2,3)
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4])
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_rep")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 1)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 1)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
dat1
# parcela principal
hybrids <- c("0F53HX", "30F53YH", "30K64HNSR","30S31H", "30S31YH", "BG7049H", "Dow2B707", "P1630H", "P30F53YH", "P30S31HR", "P32R48H", "P3646H", "STATUS VIP", "STATUS VIP3")
#subparcela
inoculation <- c("silk", "pin")
sp1 <- design.split(hybrids, inoculation,
design="crd", r = 4, serie = 0)
sp1
sp1$book
head(sp1$book, 10)
head(sp1$book, 10) # mostra 10 primeiras parcelas
trt<-c(2,5) # factorial 2x5
rcbd2 <- design.ab(trt, r = 4, design = "rcbd", serie = 2)
matrix(rcbd2$book$trt, ncol = 4)
trt<-c(2,5) # factorial 2x5
rcbd2 <- design.ab(trt, r = 4, design = "rcbd", serie = 2)
matrix(rcbd2$book$trt, ncol = 4)
matrix(rcbd2$book$r, ncol = 4)
rcbd2
head(rcbd2$book, 10)
head(rcbd2$book, 20)
head(rcbd2$book, 15)
devtools::install_github("rstudio/bookdown")
data("InsectSprays")
data(InsectSprays)
insects <- data.frame(InsectSprays)
View(InsectSprays)
View(insects)
View(InsectSprays)
data(InsectSprays)
insects <- data.frame(InsectSprays)
ggplot2::ggplot(insects, aes(spray, count))+
geom_boxplot()
library(ggplot2)
ggplot(insects, aes(spray, count))+
geom_boxplot()
insects <- data.frame(InsectSprays)
?InsectSprays
ggplot(insects, aes(spray, sqrt(count)))+
geom_boxplot()
ggplot(insects, aes(spray, sqrt(count)))+
geom_boxplot()
attach(insects)
hist(residuals(aov(count ~ spray)))
install.packages("easyanova")
library(easyanova)
m1 <- ea1(insects, design=1)
insects2 <- data.frame(spray, count)
m1 <- ea1(insects2, design=1)
m1
insects2 <- data.frame(spray, sqrt(count))
m1 <- ea1(insects2, design=1)
m1
m1$Means
m1$Meansˆ2
m1$Means$mean
(m1$Means$mean)ˆ2
m1$Means$mean*m1$Means$mean
(m1$Means$mean)^2
?scalle_fill_gradient
?scale_fill_gradient
?scale_fill_manual
?scale_fill_discrete
??scale_fill_discrete
library(RColorBrewer)
dat_sad1$sev_quant2 <- with(dat_sad1, reorder(sev_quant, sev_quant, function(x) length(x)))
?datatable
??datatable
?Column
??Column
?tabset
??tabset
install.packages(c("nlme", "stringi", "survival"))
install.packages("ggiraph")
library(ggiraph)
library(GGally)
ggcorr(wine2)
ggcorr(wine2, method = c("pairwise", "pearson"), label=T)
library(ggthemes)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
visreg(fit)
install.packages("visreg")
library(visreg)
visreg(fit)
visreg(fit, "Wind", type = "contrast")
visreg(fit, "Wind", type = "conditional")
airquality$Heat <- cut(airquality$Temp, 3, labels=c("Cool", "Mild", "Hot"))
fit.heat <- lm(Ozone ~ Solar.R + Wind + Heat, data = airquality)
visreg(fit.heat, "Heat", type = "contrast")
visreg(fit.heat, "Heat", type = "conditional")
fit <- lm(Ozone ~ Solar.R + Wind + Temp + I(Wind^2) + I(Temp^2)
+ I(Wind * Temp) + I(Wind*Temp^2) + I(Temp*Wind^2)
+ I(Temp^2 * Wind^2), data = airquality)
fit
visreg2d(fit, "Wind", "Temp", plot.type = "image")
visreg2d(fit, "Wind", "Temp", plot.type = "persp")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("foo.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
sudo tlmgr install framed
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
M = 12
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 23
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
M = 24
T = 22
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
0.2673*exp(-0.01275*(((M -21.8197)/0.7532)^2+ ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*((M -21.8197/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 28
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2873 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 24
T = 24.5
0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 15
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.0699/0.23
LWD = 24
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.17/0.23
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
LWD = 24
T = 23.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
library(ggplot)
library(ggplot2)
?scale_color_grey
log(0.05)
ln(0.05)
log10(0.05)
?log
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
# Fixed values
p + geom_vline(xintercept = 5)
p+ geom_hline(yintercept = 20)
setwd("~/Documents/github/paper-white-mold-meta-analysis")
frame_data(
~Moderator, ~ Test of moderator (P-value), ~  R<sup>2</sup>,
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
"Elevation categorical", `r ma_cor_yld_elevation$QMp`,  `r ma_cor_yld_elevation$R2`,
"Elevation continuous", `r ma_cor_yld_elevation2$QMp`, `r ma_cor_yld_elevation2$R2`,
"Incidence categorical",  `r ma_cor_yld_inc$QMp`, `r ma_cor_yld_inc$R2`,
"Yield continous",  `r ma_cor_yld_yld$QMp`, `r ma_cor_yld_yld$R2`,
"Yield categorical",  `r ma_cor_yld_yld2$QMp`, `r ma_cor_yld_yld2$R2`
)
frame_data(
~Moderator, ~Test of moderator (P-value), ~R2,
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
"Elevation categorical", `r ma_cor_yld_elevation$QMp`,  `r ma_cor_yld_elevation$R2`,
"Elevation continuous", `r ma_cor_yld_elevation2$QMp`, `r ma_cor_yld_elevation2$R2`,
"Incidence categorical",  `r ma_cor_yld_inc$QMp`, `r ma_cor_yld_inc$R2`,
"Yield continous",  `r ma_cor_yld_yld$QMp`, `r ma_cor_yld_yld$R2`,
"Yield categorical",  `r ma_cor_yld_yld2$QMp`, `r ma_cor_yld_yld2$R2`
)
frame_data(
~Moderator, ~Test of moderator, ~R2,
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
frame_data(
~Moderator, ~Test of moderator, ~R2,
frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
"Elevation categorical", `r ma_cor_yld_elevation$QMp`,  `r ma_cor_yld_elevation$R2`,
"Elevation continuous", `r ma_cor_yld_elevation2$QMp`, `r ma_cor_yld_elevation2$R2`,
"Incidence categorical",  `r ma_cor_yld_inc$QMp`, `r ma_cor_yld_inc$R2`,
"Yield continous",  `r ma_cor_yld_yld$QMp`, `r ma_cor_yld_yld$R2`,
"Yield categorical",  `r ma_cor_yld_yld2$QMp`, `r ma_cor_yld_yld2$R2`
)
library(tibble)
frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
"Elevation categorical", `r ma_cor_yld_elevation$QMp`,  `r ma_cor_yld_elevation$R2`,
"Elevation continuous", `r ma_cor_yld_elevation2$QMp`, `r ma_cor_yld_elevation2$R2`,
"Incidence categorical",  `r ma_cor_yld_inc$QMp`, `r ma_cor_yld_inc$R2`,
"Yield continous",  `r ma_cor_yld_yld$QMp`, `r ma_cor_yld_yld$R2`,
"Yield categorical",  `r ma_cor_yld_yld2$QMp`, `r ma_cor_yld_yld2$R2`
)
library(tidyverse); library(broom); library(tidyr); library(cowplot); library(tibble); library(knitr)
dat_yld <- read_csv("dat-white-mold-br.csv") %>%
group_by(study)
dat_yld
par(mfrow= c(1,3))
hist(dat_yld$inc, main = "Incidence")
hist(dat_yld$yld, main =  "Yield")
hist(dat_yld$scl, main = "Sclerotia weight")
cor_yld_inc <- dat_yld %>%
do(tidy(cor.test(.$inc, .$yld)))
dat_yld2 <- filter(dat_yld, row_number() == 1)
dat_yld3 <- full_join(cor_yld_inc, dat_yld2, by = "study") %>%
mutate(n = parameter + 2)
library(metafor)
dat_yld3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_yld3)
ma_cor_yld <- rma.uni(yi, vi, method = "ML", data = dat_yld3)
summary(ma_cor_yld)
pred_r <- predict(ma_cor_yld, transf = transf.ztor)
pred_r
ma_cor_yld_year <- rma(yi, vi, sei="",  mods = ~season, method = "ML",   data = dat_yld3)
## region
ma_cor_yld_region <- rma(yi, vi, mods = ~region, method = "ML",data = dat_yld3)
## elevation as continuous
ma_cor_yld_elevation <- rma(yi, vi, mods = ~elevation, method = "ML", data = dat_yld3)
## elevation as category
ma_cor_yld_elevation2 <- rma(yi, vi, mods = ~elevation_class, method = "ML", data = dat_yld3)
## incidence in the check as continuous
ma_cor_yld_inc <- rma(yi, vi, mods = ~inc_check, method = "ML", data = dat_yld3)
## incidence in the check as categorical
ma_cor_yld_inc2 <- rma(yi, vi, mods = ~inc_class, method = "ML", data = dat_yld3)
## yield in the check as continuous
ma_cor_yld_yld <- rma(yi, vi, mods = ~yld_check, method = "ML", data = dat_yld3)
## yield in the check as categorical
ma_cor_yld_yld2 <- rma(yi, vi, mods = ~yld_class, method = "ML", data = dat_yld3)
table_yld <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", `r ma_cor_yld_year$QMp`,  `r ma_cor_yld_year$R2`,
"Region",  `r ma_cor_yld_region$QMp`, `r ma_cor_yld_region$R2`,
"Elevation categorical", `r ma_cor_yld_elevation$QMp`,  `r ma_cor_yld_elevation$R2`,
"Elevation continuous", `r ma_cor_yld_elevation2$QMp`, `r ma_cor_yld_elevation2$R2`,
"Incidence categorical",  `r ma_cor_yld_inc$QMp`, `r ma_cor_yld_inc$R2`,
"Yield continous",  `r ma_cor_yld_yld$QMp`, `r ma_cor_yld_yld$R2`,
"Yield categorical",  `r ma_cor_yld_yld2$QMp`, `r ma_cor_yld_yld2$R2`
)
table_yld <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", ma_cor_yld_year$QMp,  ma_cor_yld_year$R2,
"Region",  ma_cor_yld_region$QMp, ma_cor_yld_region$R2,
"Elevation categorical", ma_cor_yld_elevation$QMp,  ma_cor_yld_elevation$R2,
"Elevation continuous", ma_cor_yld_elevation2$QMp, ma_cor_yld_elevation2$R2,
"Incidence categorical", ma_cor_yld_inc$QMp, ma_cor_yld_inc$R,
"Yield continous",  ma_cor_yld_yld$QMp, ma_cor_yld_yld$R2,
"Yield categorical", ma_cor_yld_yld2$QMp, ma_cor_yld_yld2$R2
)
kable(table_yld)
