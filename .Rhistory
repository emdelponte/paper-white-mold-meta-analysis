fit
visreg2d(fit, "Wind", "Temp", plot.type = "image")
visreg2d(fit, "Wind", "Temp", plot.type = "persp")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("foo.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
sudo tlmgr install framed
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
M = 12
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 23
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
M = 24
T = 22
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
0.2673*exp(-0.01275*(((M -21.8197)/0.7532)^2+ ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*((M -21.8197/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 28
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2873 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 24
T = 24.5
0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 15
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.0699/0.23
LWD = 24
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.17/0.23
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
LWD = 24
T = 23.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
library(ggplot)
library(ggplot2)
?scale_color_grey
log(0.05)
ln(0.05)
log10(0.05)
?log
fun <- function(x, y) {
plot(x, y)
abline(lm(x~y))
}
fun(1:10, 10:1)
library(ggplot2)
fun <- function(df) {
ggplot(df, aes(X, y)) + geom_point()
}
df <- data.frame(x=1:10, y=10:1)
p <- fun(df)
# examine p
str(p)
# plot p
p
fun <- function(df) {
ggplot(df, aes(X, y)) + geom_point()
}
df <- data.frame(x=1:10, y=10:1)
p <- fun(df)
# examine p
str(p)
# plot p
p
library(ggplot2)
fun <- function(df) {
ggplot(df, aes(x, y)) + geom_point()
}
df <- data.frame(x=1:10, y=10:1)
p <- fun(df)
# examine p
str(p)
# plot p
p
fun <- function(dataset){
require(ggplot2)
p <- ggplot(dataset, aes(x = x, y = y)) + geom_smooth(method = "lm") + geom_point()
print(p)
return(p)
}
p1 <- fun(data.frame(x = c(1,2,3,4,5), y = rnorm(5)))
p1
fun <- function(dataset){
require(ggplot2)
p <- ggplot(dataset, aes(x = x, y = y)) + geom_smooth(method = "lm") + geom_point()
print(p)
return(p)
}
p1 <- fun(data.frame(x = c(1,2,3,4,5), y = rnorm(5)))
p1
p1 <- fun(data.frame(x = c(1,2,3,4,5), y = rnorm(5)))
p1
p1 <- fun(data.frame(x = c(1,2,3,4,5), y = rnorm(5)))
p1
p1 <- fun(data.frame(x = c(1,2,3,4,5), y = rnorm(5)))
p1
d1 = data.frame(x = 1:10,  y = rexp(10))
d2 = data.frame(x = 5:20,  y = rnorm(16))
d3 = data.frame(x = 21:30, y = rpois(10, 4))
d1
plots = llply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = laply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = lapply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = llpply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = llply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = lapply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
plots = lpply(list(d1, d2, d3), `%+%`, p = qplot(x, y))
d3 <- data.frame(x = 1:10, y = rexp(10))
rs <- lapply(list(d1,d2,d3),FUN = function(x,p){p %+% x},p=p)
rs
d3
rs <- lapply(list(d1,d2,d3),FUN = function(x,p){p %+% x},p=p)
p <- fun(df)
d3 <- data.frame(x = 1:10, y = rexp(10))
rs <- lapply(list(d1,d2,d3),FUN = function(x,p){p %+% x},p=p)
rs
d1 <- data.frame(x=1:10,y=rnorm(10))
d2 <- data.frame(x=20:29,y=runif(10))
p <- ggplot(data = d1, aes(x = x, y = y)) + geom_point()
print(p)
print(p %+% d2)
d1 <- data.frame(x=1:10,y=rnorm(10))
d2 <- data.frame(x=20:29,y=runif(10))
p <- ggplot(data = d1, aes(x = x, y = y)) + geom_point()
print(p)
print(p %+% d2)
d1 <- data.frame(x=1:10,y=rnorm(10))
d2 <- data.frame(x=20:29,y=runif(10))
d3 <- data.frame(x=20:100, y=runif(10))
d3 <- data.frame(x=20:11,y=runif(10))
p <- ggplot(data = d1, aes(x = x, y = y)) + geom_point()
print(p)
print(p %+% d2 %+% d3)
d1 <- data.frame(x=1:10,y=rnorm(10))
d2 <- data.frame(x=20:29,y=runif(10))
d3 <- data.frame(x=20:11,y=runif(10))
p <- ggplot(data = d1, aes(x = x, y = y)) + geom_point()
print(p)
print(p %+% d2 %+% d3)
d1 <- data.frame(x=1:10,y=rnorm(10))
d2 <- data.frame(x=20:29,y=runif(10))
d3 <- data.frame(x=20:11,y=runif(10))
p <- ggplot(data = d1, aes(x = x, y = y)) + geom_point()
print(p)
print(p %+% d2 %+% d3)
print(p %+% d2)
my.plot <- function() {
result <- ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
a <- my.plot()
a
my.plot <- function(x,y) {
result <- ggplot(data=mtcars, aes(x=x, y=y)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
a <- my.plot(10, 12)
a
my.plot <- function(data$x,data$y) {
my.plot <- function(data.frame) {
result <- ggplot(data=mtcars, aes(x=x, y=y)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
d1 = data.frame(x = 1:10,  y = rexp(10))
a <- my.plot(d1)
a
my.plot <- function(data.frame) {
result <- ggplot(data=mtcars, aes(x=data.frame$x, y=data.frame$y)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
a <- my.plot(d1)
a
my.plot <- function(data.frame) {
result <- ggplot(data=data.frame, aes(x=x, y=y)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
a <- my.plot(d1)
a
my.plot <- function(data.frame) {
result <- ggplot(data=data.frame, aes(x=x, y=y)) + geom_point()
# you can forget the return below because R will take the last expression which is result as return value
# return(result)
}
a <- my.plot(d1)
sessionInfo()
devtools::session_Info()
devtools::session_info()
install.packages("prettydoc")
plot(cars)
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
library(tidyverse); library(broom); library(tidyr);
library(cowplot); library(tibble); library(knitr)
dat_yld <- read_csv("dat-white-mold-br.csv") %>%
group_by(study)
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
citation
dat_yld <- read_csv("dat-white-mold-br.csv") %>%
group_by(study)
dat_yld <- read_csv("dat-white-mold-br.csv") %>%
group_by(study)
dat_yld
par(mfrow= c(1,3))
hist(dat_yld$inc, main = "Incidence")
hist(dat_yld$yld, main =  "Yield")
hist(dat_yld$scl, main = "Sclerotia weight")
pred_r <- predict(ma_cor_yld, transf = transf.ztor)
ma_cor_yld <- rma.uni(yi, vi, method = "ML", data = dat_yld3)
library(metafor)
dat_yld3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_yld3)
dat_yld2 <- filter(dat_yld, row_number() == 1)
dat_yld3 <- full_join(cor_yld_inc, dat_yld2, by = "study") %>%
mutate(n = parameter + 2)
cor_yld_inc <- dat_yld %>%
do(tidy(cor.test(.$inc, .$yld)))
dat_yld2 <- filter(dat_yld, row_number() == 1)
dat_yld3 <- full_join(cor_yld_inc, dat_yld2, by = "study") %>%
mutate(n = parameter + 2)
library(metafor)
dat_yld3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_yld3)
head(dat_yld3)
ma_cor_yld <- rma.uni(yi, vi, method = "ML", data = dat_yld3)
summary(ma_cor_yld)
pred_r <- predict(ma_cor_yld, transf = transf.ztor)
pred_r
table_yld <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", ma_cor_yld_year$QMp,  ma_cor_yld_year$R2,
"Region",  ma_cor_yld_region$QMp, ma_cor_yld_region$R2,
"Elevation categorical", ma_cor_yld_elevation$QMp,  ma_cor_yld_elevation$R2,
"Elevation continuous", ma_cor_yld_elevation2$QMp, ma_cor_yld_elevation2$R2,
"Incidence categorical", ma_cor_yld_inc$QMp, ma_cor_yld_inc$R,
"Yield continous",  ma_cor_yld_yld$QMp, ma_cor_yld_yld$R2,
"Yield categorical", ma_cor_yld_yld2$QMp, ma_cor_yld_yld2$R2
)
# season
ma_cor_yld_year <- rma(yi, vi, sei="",  mods = ~season, method = "ML",   data = dat_yld3)
## region
ma_cor_yld_region <- rma(yi, vi, mods = ~region, method = "ML",data = dat_yld3)
## elevation as continuous
ma_cor_yld_elevation <- rma(yi, vi, mods = ~elevation, method = "ML", data = dat_yld3)
## elevation as category
ma_cor_yld_elevation2 <- rma(yi, vi, mods = ~elevation_class, method = "ML", data = dat_yld3)
## incidence in the check as continuous
ma_cor_yld_inc <- rma(yi, vi, mods = ~inc_check, method = "ML", data = dat_yld3)
## incidence in the check as categorical
ma_cor_yld_inc2 <- rma(yi, vi, mods = ~inc_class, method = "ML", data = dat_yld3)
## yield in the check as continuous
ma_cor_yld_yld <- rma(yi, vi, mods = ~yld_check, method = "ML", data = dat_yld3)
## yield in the check as categorical
ma_cor_yld_yld2 <- rma(yi, vi, mods = ~yld_class, method = "ML", data = dat_yld3)
table_yld <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", ma_cor_yld_year$QMp,  ma_cor_yld_year$R2,
"Region",  ma_cor_yld_region$QMp, ma_cor_yld_region$R2,
"Elevation categorical", ma_cor_yld_elevation$QMp,  ma_cor_yld_elevation$R2,
"Elevation continuous", ma_cor_yld_elevation2$QMp, ma_cor_yld_elevation2$R2,
"Incidence categorical", ma_cor_yld_inc$QMp, ma_cor_yld_inc$R,
"Yield continous",  ma_cor_yld_yld$QMp, ma_cor_yld_yld$R2,
"Yield categorical", ma_cor_yld_yld2$QMp, ma_cor_yld_yld2$R2
)
kable(table_yld, format = "pandoc", caption = "P-value for the test for the effect of moderator  and the amount of variance (heterogeneity) accounted for by the moderator (R2 statistics)")
wi    <- 1/sqrt(dat_yld3$vi)
size  <- 0.5 + 3.0 * (wi - min(wi))/(max(wi) - min(wi))
library(ggplot2)
dat_yld3 %>%
ggplot(aes(x = study, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), color="grey50") +
geom_point(aes(size = size), shape = 15, color="grey70") +
geom_hline(yintercept = pred_r$pred, size=0.75)+
geom_hline(yintercept = c(pred_r$cr.lb, pred_r$cr.ub), linetype="dashed")+
coord_flip()+
scale_y_reverse(limits = c(0.65,-1.2))+
labs(x = "Slope") +
theme_minimal() +
labs(size = "study weight",
title = "White mold vs. soybean yield",
y = "Estimated r", x = "Study number (reordered)")
cor_scl_inc <- dat_yld %>%
na.omit(dat_yld)%>%
do(tidy(cor.test(.$inc, .$scl)))
dat_scl2 <- filter(dat_yld, row_number() == 1) %>%
na.omit(dat_scl)
dat_scl3 <- full_join(cor_scl_inc, dat_scl2,
by = "study") %>%
mutate(n = parameter + 2)
# create variable with the number of data points in the correlation
library(metafor)
dat_scl3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_scl3)
library(rcrossref)
citation <- cr_cn(dois = "10.1111/ppa.12590", format = "text", style = "apa")
citation
library(tidyverse); library(broom); library(tidyr);
library(cowplot); library(tibble); library(knitr)
dat_yld <- read_csv("dat-white-mold-br.csv") %>%
group_by(study)
dat_yld
par(mfrow= c(1,3))
hist(dat_yld$inc, main = "Incidence")
hist(dat_yld$yld, main =  "Yield")
hist(dat_yld$scl, main = "Sclerotia weight")
library(ggplot2)
library(ggthemes)
ggplot(dat_yld, aes(inc, yld))+
geom_point(shape = 1)+
stat_smooth(method = lm, fullrange=TRUE, se = F, col = "black")+
ylab("Yield (kg/ha)")+
xlab("White mold incidence (%)")+
theme_minimal()+
facet_wrap(~ study, ncol = 7, scales = "fixed")
ggplot(dat_yld, aes(inc, scl))+
geom_point(shape = 1)+
stat_smooth(method = lm, fullrange=TRUE, se = F, col = "black")+
ylab("Sclerotia weight(g)")+
xlab("White mold incidence (%)")+
theme_minimal()+
facet_wrap(~ study, ncol = 7, scales = "fixed")
cor_yld_inc <- dat_yld %>%
do(tidy(cor.test(.$inc, .$yld)))
dat_yld2 <- filter(dat_yld, row_number() == 1)
dat_yld3 <- full_join(cor_yld_inc, dat_yld2, by = "study") %>%
mutate(n = parameter + 2)
library(metafor)
dat_yld3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_yld3)
head(dat_yld3)
ma_cor_yld <- rma.uni(yi, vi, method = "ML", data = dat_yld3)
summary(ma_cor_yld)
pred_r <- predict(ma_cor_yld, transf = transf.ztor)
pred_r
# season
ma_cor_yld_year <- rma(yi, vi, sei="",  mods = ~season, method = "ML",   data = dat_yld3)
## region
ma_cor_yld_region <- rma(yi, vi, mods = ~region, method = "ML",data = dat_yld3)
## elevation as continuous
ma_cor_yld_elevation <- rma(yi, vi, mods = ~elevation, method = "ML", data = dat_yld3)
## elevation as category
ma_cor_yld_elevation2 <- rma(yi, vi, mods = ~elevation_class, method = "ML", data = dat_yld3)
## incidence in the check as continuous
ma_cor_yld_inc <- rma(yi, vi, mods = ~inc_check, method = "ML", data = dat_yld3)
## incidence in the check as categorical
ma_cor_yld_inc2 <- rma(yi, vi, mods = ~inc_class, method = "ML", data = dat_yld3)
## yield in the check as continuous
ma_cor_yld_yld <- rma(yi, vi, mods = ~yld_check, method = "ML", data = dat_yld3)
## yield in the check as categorical
ma_cor_yld_yld2 <- rma(yi, vi, mods = ~yld_class, method = "ML", data = dat_yld3)
table_yld <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", ma_cor_yld_year$QMp,  ma_cor_yld_year$R2,
"Region",  ma_cor_yld_region$QMp, ma_cor_yld_region$R2,
"Elevation categorical", ma_cor_yld_elevation$QMp,  ma_cor_yld_elevation$R2,
"Elevation continuous", ma_cor_yld_elevation2$QMp, ma_cor_yld_elevation2$R2,
"Incidence categorical", ma_cor_yld_inc$QMp, ma_cor_yld_inc$R,
"Yield continous",  ma_cor_yld_yld$QMp, ma_cor_yld_yld$R2,
"Yield categorical", ma_cor_yld_yld2$QMp, ma_cor_yld_yld2$R2
)
kable(table_yld, format = "pandoc", caption = "P-value for the test for the effect of moderator  and the amount of variance (heterogeneity) accounted for by the moderator (R2 statistics)")
wi    <- 1/sqrt(dat_yld3$vi)
size  <- 0.5 + 3.0 * (wi - min(wi))/(max(wi) - min(wi))
library(ggplot2)
dat_yld3 %>%
ggplot(aes(x = study, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), color="grey50") +
geom_point(aes(size = size), shape = 15, color="grey70") +
geom_hline(yintercept = pred_r$pred, size=0.75)+
geom_hline(yintercept = c(pred_r$cr.lb, pred_r$cr.ub), linetype="dashed")+
coord_flip()+
scale_y_reverse(limits = c(0.65,-1.2))+
labs(x = "Slope") +
theme_minimal() +
labs(size = "study weight",
title = "White mold vs. soybean yield",
y = "Estimated r", x = "Study number (reordered)")
cor_scl_inc <- dat_yld %>%
na.omit(dat_yld)%>%
do(tidy(cor.test(.$inc, .$scl)))
dat_scl2 <- filter(dat_yld, row_number() == 1) %>%
na.omit(dat_scl)
dat_scl3 <- full_join(cor_scl_inc, dat_scl2,
by = "study") %>%
mutate(n = parameter + 2)
# create variable with the number of data points in the correlation
library(metafor)
dat_scl3 <- escalc(measure = "ZCOR", ri = estimate, ni = n, data = dat_scl3)
ma_cor_scl <- rma.uni(yi, vi, method = "ML", data = dat_scl3)
summary(ma_cor_scl)
pred_r_scl <- predict(ma_cor_scl, transf = transf.ztor)
pred_r_scl
# season
ma_cor_scl_year <- rma(yi, vi, mods = ~season, method = "ML",   data = dat_scl3)
## region
ma_cor_scl_region <- rma(yi, vi, mods = ~region, method = "ML",data = dat_scl3)
## elevation as continuous
ma_cor_scl_elevation <- rma(yi, vi, mods = ~elevation, method = "ML", data = dat_scl3)
## elevation as category
ma_cor_scl_elevation2 <- rma(yi, vi, mods = ~elevation_class, method = "ML", data = dat_scl3)
## incidence in the check as continuous
ma_cor_scl_inc <- rma(yi, vi, mods = ~inc_check, method = "ML", data = dat_scl3)
## incidence in the check as categorical
ma_cor_scl_inc2 <- rma(yi, vi, mods = ~inc_class, method = "ML", data = dat_scl3)
## yield in the check as continuous
ma_cor_scl_yld <- rma(yi, vi, mods = ~yld_check, method = "ML", data = dat_scl3)
## yield in the check as categorical
ma_cor_scl_yld2 <- rma(yi, vi, mods = ~yld_class, method = "ML", data = dat_scl3)
table_scl <- frame_data(
~"Moderator", ~"Test of moderator", ~"R2",
"Season", ma_cor_scl_year$QMp,  ma_cor_scl_year$R2,
"Region",  ma_cor_scl_region$QMp, ma_cor_scl_region$R2,
"Elevation categorical", ma_cor_scl_elevation$QMp,  ma_cor_scl_elevation$R2,
"Elevation continuous", ma_cor_scl_elevation2$QMp, ma_cor_scl_elevation2$R2,
"Incidence categorical", ma_cor_scl_inc$QMp, ma_cor_scl_inc$R,
"Yield continous",  ma_cor_scl_yld$QMp, ma_cor_scl_yld$R2,
"Yield categorical", ma_cor_scl_yld2$QMp, ma_cor_scl_yld2$R2
)
kable(table_yld, format = "markdown", caption = "P-value of the test for the effect of the moderator and the amount of variance (heterogeneity) accounted for by the moderator (R2 statistics)")
wi    <- 1/sqrt(dat_scl3$vi)
size  <- 0.5 + 3.0 * (wi - min(wi))/(max(wi) - min(wi))
dat_scl3 %>%
ggplot(aes(x = study, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), color="grey50") +
geom_point(aes(size = size), shape = 15, color="grey70") +
geom_hline(yintercept = pred_r_scl$pred, size=0.75)+
geom_hline(yintercept = c(pred_r_scl$ci.lb, pred_r_scl$ci.ub), linetype="dashed")+
coord_flip()+
labs(x = "Slope")+
theme_minimal()+
labs(size = "study weight",
title = "White mold incidence vs. sclerotia weight",
y = "Estimated r", x = "Study number (reordered)")
devtools::session_info()
setwd("~/Documents/github/paper-white-mold-meta-analysis")
knitr::opts_chunk$set(echo = TRUE)
options(width=200)
devtools::session_info()
